import Foundation

//DispatchQueue.main.async {
//    for _ in 1...5 {
//        print("🤪🤪🤪🤪🤪🤪")
//        sleep(1)
//    }
//}
//
//DispatchQueue.main.async {
//    for _ in 1...5 {
//        print("🥶🥶🥶🥶🥶🥶")
//        sleep(2)
//    }
//}

/*
 위 코드는 main 스레드에서 비동기적으로 작업을 처리하는 예제
 두 개의 DispatchQueue.main.async 블록을 사용하여 각기 다른 작업을 정의하고 있음.
 첫 번째 블록은 1초 간격으로 5번 "🤪🤪🤪🤪🤪🤪"를 출력하고, 두 번째 블록은 2초 간격으로 5번 "🥶🥶🥶🥶🥶🥶"를 출력.

 비동기적으로 작업을 처리하기 때문에 각 작업이 끝날 때까지 기다리지 않고 바로 다음 작업을 실행하려는 의도가 있지만, 
 실제로는 단일 스레드(main 스레드)에서 작업이 수행되므로 동시에 작업이 처리되지 않음 결과적으로, 작업은 쌓인 순서대로 처리함.
 ===================================================================================================
 */

DispatchQueue.main.async {
    for _ in 1...5 {
        print("😀😀😀😀😀")
        sleep(1)
    }
}

for _ in 1...5 {
    print("🥶🥶🥶🥶🥶")
    sleep(2)
}

/*
 위 코드는 단일 스레드에서 비동기적으로 작업을 처리하는 예제
 DispatchQueue.main.async 블록 안에서 1초 간격으로 5번 "😀😀😀😀😀"를 출력하고,
 그 다음으로 메인 코드에서 2초 간격으로 5번 "🥶🥶🥶🥶🥶"를 출력

 비동기적으로 코드 블록을 호출했기 때문에 작업이 끝나기를 기다리지 않고 다음 코드로 넘어.
 따라서 "🥶🥶🥶🥶🥶"가 먼저 출력될 수 있으며, "😀😀😀😀😀"의 출력은 그 다음으로 미루어질 수 있음. 
 (정확히는 어떤게 먼저 출력될지는 모름)

 이러한 비동기 특성은 단일 스레드 환경뿐만 아니라 글로벌 스레드 환경에서도 동일하게 나타남
 ===================================================================================================
 */
